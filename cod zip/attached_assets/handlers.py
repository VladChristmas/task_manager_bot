import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters
)
from database import Database
from navigation_manager import NavigationManager
from constants import *
from utils import (
    is_valid_report_format,
    is_valid_file_size,
    format_report_info,
    is_admin
)

logger = logging.getLogger(__name__)
db = Database("bot_database.db")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å, —á—Ç–æ –∏ –≤ bot.py
nav_manager = NavigationManager()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        keyboard = [
            [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")],
            [KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")],
            [KeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        await error_handler(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        await update.message.reply_text(HELP_TEXT)
        logger.info("–°–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"Error in help command: {e}", exc_info=True)
        await error_handler(update, context)

async def add_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /addchat command"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /addchat –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        chat_id = update.effective_chat.id
        chat_title = update.effective_chat.title
        if not chat_title and update.effective_chat.type == 'private':
            chat_title = f"–õ–∏—á–Ω—ã–π —á–∞—Ç —Å {update.effective_user.first_name}"

        is_group = update.effective_chat.type in ['group', 'supergroup']

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: ID={chat_id}, Title={chat_title}, Type={update.effective_chat.type}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∞—Ç
        existing_chat = db.execute_query("SELECT chat_id FROM chats WHERE chat_id = ?", (chat_id,))
        if existing_chat:
            await update.message.reply_text(
                "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤."
            )
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞: {chat_id}")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        db.execute_query(
            "INSERT INTO chats (chat_id, title, is_group) VALUES (?, ?, ?)",
            (chat_id, chat_title, is_group)
        )

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat_title} ({chat_id})")
        await update.message.reply_text(
            f"–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É!\n"
            f"–¢–∏–ø —á–∞—Ç–∞: {'–ì—Ä—É–ø–ø–∞' if is_group else '–õ–∏—á–Ω—ã–π —á–∞—Ç'}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤."
        )

    except Exception as e:
        logger.error(f"Error in add chat command: {e}", exc_info=True)
        await error_handler(update, context)

async def create_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle task creation"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        context.user_data['state'] = 'awaiting_task_text'
        keyboard = [
            [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: pdf, doc, docx, xls, xlsx, txt",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in create task command: {e}", exc_info=True)
        await error_handler(update, context)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle settings command"""
    try:
        logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        if not is_admin(update.effective_user.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
            await update.message.reply_text(UNAUTHORIZED)
            return

        keyboard = [
            [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏")],
            [KeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error in settings command: {e}", exc_info=True)
        await error_handler(update, context)

async def create_chat_group_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle chat group creation"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        context.user_data['state'] = 'creating_chat_group'
        keyboard = [
            [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in create chat group command: {e}", exc_info=True)
        await error_handler(update, context)

async def view_connected_chats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle viewing connected chats"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chats = db.execute_query("""
            SELECT chat_id, title, is_group, added_at
            FROM chats
            ORDER BY added_at DESC
        """)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(chats) if chats else 0}")

        if not chats:
            await update.message.reply_text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addchat –≤ —á–∞—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫.")
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–∞—Ö
        response = "üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n\n"
        for chat in chats:
            chat_type = "–ì—Ä—É–ø–ø–∞" if chat['is_group'] else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
            response += f"‚Ä¢ {chat['title']}\n"
            response += f"  –¢–∏–ø: {chat_type}\n"
            response += f"  ID: {chat['chat_id']}\n"
            response += f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat['added_at']}\n\n"

        await update.message.reply_text(response)
        logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"Error in view connected chats command: {e}", exc_info=True)
        await error_handler(update, context)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages"""
    try:
        message_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {message_text}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if message_text == "üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
            await create_task_command(update, context)
        elif message_text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π":
            await view_active_tasks_command(update, context)
        elif message_text == "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤":
            await view_connected_chats_command(update, context)
        elif message_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await settings_command(update, context)
        elif message_text == "‚ùì –ü–æ–º–æ—â—å":
            await help_command(update, context)
        elif message_text == "üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤":
            await create_chat_group_command(update, context)
        elif message_text == "üîô –û—Ç–º–µ–Ω–∞" or message_text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.clear()  # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            await start_command(update, context)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.to_dict()}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            await update.message.reply_text(INVALID_COMMAND)

    except Exception as e:
        logger.error(f"Error handling text message: {e}", exc_info=True)
        await error_handler(update, context)

async def submit_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /submit_report command"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /submit_report –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        # Create task in database
        task_id = db.create_task(
            text="New report submission",
            creator_id=update.effective_user.id
        )

        context.user_data['awaiting_report'] = True
        context.user_data['current_task_id'] = task_id

        await update.message.reply_text("Please send your report file.")
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID: {task_id}")
    except Exception as e:
        logger.error(f"Error in submit report command: {e}", exc_info=True)
        await error_handler(update, context)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle document messages"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        if not context.user_data.get('awaiting_report'):
            logger.warning("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç")
            return

        document = update.message.document
        if not is_valid_report_format(document.file_name):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {document.file_name}")
            await update.message.reply_text(INVALID_FORMAT)
            return

        if not is_valid_file_size(document.file_size):
            logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {document.file_size} bytes")
            await update.message.reply_text(REPORT_TOO_LARGE)
            return

        task_id = context.user_data.get('current_task_id')
        if not task_id:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
            await update.message.reply_text("Error: No active task found")
            return

        # Save file information using new database structure
        db.execute_query(
            "INSERT INTO task_media (task_id, file_id, file_type) VALUES (?, ?, ?)",
            (task_id, document.file_id, 'document')
        )

        context.user_data['awaiting_report'] = False
        await update.message.reply_text(REPORT_SUBMITTED)
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}")

    except Exception as e:
        logger.error(f"Error handling document: {e}", exc_info=True)
        await error_handler(update, context)

async def my_reports_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /my_reports command"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /my_reports –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        # Get user's tasks from database
        tasks = db.execute_query("""
            SELECT t.*, tm.file_id, tm.file_type
            FROM tasks t
            LEFT JOIN task_media tm ON t.id = tm.task_id
            WHERE t.creator_id = ?
            ORDER BY t.created_at DESC
        """, (update.effective_user.id,))

        if not tasks:
            await update.message.reply_text(NO_REPORTS_FOUND)
            logger.info("–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        response = "Your submitted reports:\n\n"
        for task in tasks:
            response += format_report_info(task) + "\n\n"

        await update.message.reply_text(response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"Error in my reports command: {e}", exc_info=True)
        await error_handler(update, context)

async def collect_reports_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /collect_reports command (admin only)"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /collect_reports –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        if not is_admin(update.effective_user.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ collect_reports")
            await update.message.reply_text(UNAUTHORIZED)
            return

        # Get all tasks with their media files
        tasks = db.execute_query("""
            SELECT t.*, u.username, tm.file_id, tm.file_type
            FROM tasks t
            LEFT JOIN users u ON t.creator_id = u.user_id
            LEFT JOIN task_media tm ON t.id = tm.task_id
            ORDER BY t.created_at DESC
        """)

        if not tasks:
            await update.message.reply_text(NO_REPORTS_FOUND)
            logger.info("–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        response = "All submitted reports:\n\n"
        current_task_id = None
        for task in tasks:
            if current_task_id != task['id']:
                response += format_report_info(task) + "\n\n"
                current_task_id = task['id']

        await update.message.reply_text(response)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    except Exception as e:
        logger.error(f"Error in collect reports command: {e}", exc_info=True)
        await error_handler(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logger.error(f"Update {update} caused error {context.error}")
    logger.error(f"Error details: {context.error}", exc_info=True)
    if update:
        logger.info(f"Update type: {type(update)}")
        logger.info(f"Update details: {update.to_dict()}")
    if update and update.effective_message:
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def view_active_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle viewing active tasks"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tasks = db.execute_query("""
            SELECT t.*, tm.file_id, tm.file_type
            FROM tasks t
            LEFT JOIN task_media tm ON t.id = tm.task_id
            WHERE t.status = 'active'
            ORDER BY t.created_at DESC
        """)

        if not tasks:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞–Ω–∏—è—Ö
        response = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        current_task_id = None
        for task in tasks:
            if current_task_id != task['id']:
                response += format_report_info(task) + "\n\n"
                current_task_id = task['id']

        await update.message.reply_text(response)
        logger.info("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"Error in view active tasks command: {e}", exc_info=True)
        await error_handler(update, context)


async def debug_db_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /debug_db command (admin only)"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /debug_db –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        if not is_admin(update.effective_user.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ debug_db")
            await update.message.reply_text(UNAUTHORIZED)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = {
            'chats': db.execute_query("SELECT COUNT(*) as count FROM chats"),
            'chat_groups': db.execute_query("SELECT COUNT(*) as count FROM chat_groups"),
            'tasks': db.execute_query("SELECT COUNT(*) as count FROM tasks")
        }

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
        for table_name, count in tables.items():
            response += f"‚Ä¢ {table_name}: {count[0]['count']} –∑–∞–ø–∏—Å–µ–π\n"

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
        recent_chats = db.execute_query("""
            SELECT chat_id, title, is_group, added_at
            FROM chats
            ORDER BY added_at DESC
            LIMIT 5
        """)

        if recent_chats:
            response += "\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n"
            for chat in recent_chats:
                response += f"‚Ä¢ {chat['title']} (ID: {chat['chat_id']})\n"
                response += f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat['added_at']}\n"

        await update.message.reply_text(response)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"Error in debug_db command: {e}", exc_info=True)
        await error_handler(update, context)

def register_handlers(application):
    """Register all handlers"""
    try:
        # Basic commands
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("addchat", add_chat_command))
        application.add_handler(CommandHandler("submit_report", submit_report_command))
        application.add_handler(CommandHandler("my_reports", my_reports_command))
        application.add_handler(CommandHandler("collect_reports", collect_reports_command))
        application.add_handler(CommandHandler("debug_db", debug_db_command))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        # Message handlers
        application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

        # Add handler for logging all messages
        application.add_handler(MessageHandler(
            filters.ALL, 
            lambda update, context: logger.info(f"Received update: {update.to_dict()}")
        ))

        # Error handler
        application.add_error_handler(error_handler)

        logger.info("Handlers registered successfully")
        logger.info("Registered commands: /start, /help, /addchat, /submit_report, /my_reports, /collect_reports, /debug_db")
    except Exception as e:
        logger.error(f"Error registering handlers: {e}", exc_info=True)
        raise