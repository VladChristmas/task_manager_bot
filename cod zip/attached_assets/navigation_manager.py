"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –≤ –º–µ–Ω—é
"""

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –≤ –º–µ–Ω—é"""

    def __init__(self):
        self.menu_states = {
            'main_menu': {
                'keyboard': [
                    ["üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"],
                    ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"],
                    ["üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"],
                    ["üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤"],
                    ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"]
                ],
                'text': "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            },
            'settings': {
                'keyboard': [
                    ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
                    ["üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"],
                    ["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                ],
                'text': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
            },
            'awaiting_task_text': {
                'keyboard': [
                    ["üîô –û—Ç–º–µ–Ω–∞"]
                ],
                'text': "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã):"
            },
            'choosing_recipient_type': {
                'keyboard': [
                    ["üë• –í—Å–µ —á–∞—Ç—ã"],
                    ["üìã –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"],
                    ["üë• –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É"],
                    ["üîô –û—Ç–º–µ–Ω–∞"]
                ],
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞–Ω–∏—è:"
            },
            'selecting_recipients': {
                'keyboard': [
                    ["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º"],
                    ["üîô –ù–∞–∑–∞–¥"]
                ],
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞:"
            },
            'creating_chat_group': {
                'keyboard': [
                    ["üîô –û—Ç–º–µ–Ω–∞"]
                ],
                'text': "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤:"
            },
            'adding_chats_to_group': {
                'keyboard': [
                    ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"],
                    ["üîô –ù–∞–∑–∞–¥"]
                ],
                'text': "üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:"
            },
            'statistics': {
                'keyboard': [
                    ["üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
                    ["üîô –ù–∞–∑–∞–¥"]
                ],
                'text': "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
            }
        }

    def get_previous_state(self, user_data: dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if not user_data or 'navigation_history' not in user_data:
            return 'main_menu'

        history = user_data['navigation_history']
        if len(history) < 2:
            return 'main_menu'

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return history[-2]

    def get_menu_markup(self, state: str) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if state in self.menu_states:
            return self.menu_states[state]['keyboard'], self.menu_states[state]['text']
        return None, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    def clear_user_state(self, user_data: dict) -> None:
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if not user_data:
            return

        keys_to_preserve = {'navigation_history', 'state'}
        preserved_data = {k: user_data[k] for k in keys_to_preserve if k in user_data}
        user_data.clear()
        user_data.update(preserved_data)

    def add_to_history(self, user_data: dict, state: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if not user_data:
            return

        if 'navigation_history' not in user_data:
            user_data['navigation_history'] = []

        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ä—è–¥
        if not user_data['navigation_history'] or user_data['navigation_history'][-1] != state:
            user_data['navigation_history'].append(state)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        if len(user_data['navigation_history']) > 10:
            user_data['navigation_history'] = user_data['navigation_history'][-10:]

    def get_last_state(self, user_data: dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        if user_data and 'navigation_history' in user_data and user_data['navigation_history']:
            return user_data['navigation_history'][-1]
        return 'main_menu'