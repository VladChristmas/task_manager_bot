import os
import logging
import telebot
from dotenv import load_dotenv
from database import Database
import sys
import signal
import time
import requests
from requests.exceptions import RequestException
from threading import Lock
import atexit
import fcntl
import errno

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database("bot_database.db")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å, —á—Ç–æ –∏ –≤ bot.py

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    _instance = None
    _initialized = False
    _lock = Lock()
    _pid_file = 'bot.pid'
    _pid_fd = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(TelegramBot, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if self._initialized:
            return

        try:
            if not self._ensure_single_instance():
                raise RuntimeError("Another instance is already running")

            with self._lock:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                load_dotenv()
                logger.info("Loading environment variables...")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                self.token = os.getenv('BOT_TOKEN')
                if not self.token:
                    logger.error("BOT_TOKEN not found in environment variables")
                    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                logger.info("BOT_TOKEN successfully loaded")

                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                self._clear_webhook()
                self._clear_pending_updates()

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                self.bot = telebot.TeleBot(
                    self.token,
                    parse_mode='HTML',
                    threaded=True,
                    num_threads=1  # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
                telebot.apihelper.RETRY_ON_ERROR = True
                telebot.apihelper.CONNECT_TIMEOUT = 3.5
                telebot.apihelper.READ_TIMEOUT = 10

                self._setup_handlers()
                self._initialized = True
                logger.info("Bot initialized successfully")

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                signal.signal(signal.SIGINT, self._signal_handler)
                signal.signal(signal.SIGTERM, self._signal_handler)

                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                atexit.register(self._cleanup)

        except Exception as e:
            logger.error(f"Error during initialization: {e}", exc_info=True)
            self._cleanup()
            raise

    def _ensure_single_instance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        try:
            logger.info(f"Checking for existing bot instance (PID: {os.getpid()})")
            self._pid_fd = os.open(self._pid_file, os.O_CREAT | os.O_RDWR)
            fcntl.flock(self._pid_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            os.write(self._pid_fd, str(os.getpid()).encode())
            logger.info(f"Successfully acquired lock for PID {os.getpid()}")
            return True
        except (IOError, OSError) as e:
            if e.errno == errno.EACCES or e.errno == errno.EAGAIN:
                logger.warning("Another instance is already running")
                if self._pid_fd:
                    os.close(self._pid_fd)
                return False
            raise

    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if self._pid_fd is not None:
                logger.info(f"Cleaning up resources for PID {os.getpid()}")
                fcntl.flock(self._pid_fd, fcntl.LOCK_UN)
                os.close(self._pid_fd)
                try:
                    os.unlink(self._pid_file)
                except OSError as e:
                    if e.errno != errno.ENOENT:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω
                        raise
                logger.info("Process lock released and PID file removed")
            logger.info("Cleanup completed")
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")

    def _clear_webhook(self):
        """–û—á–∏—Å—Ç–∫–∞ webhook'–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling"""
        try:
            api_url = f"https://api.telegram.org/bot{self.token}/deleteWebhook"
            response = requests.get(api_url, timeout=5)
            if response.status_code == 200:
                logger.info("Successfully cleared webhook")
            else:
                logger.warning(f"Failed to clear webhook: {response.text}")
        except RequestException as e:
            logger.warning(f"Error clearing webhook: {e}")

    def _clear_pending_updates(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        try:
            api_url = f"https://api.telegram.org/bot{self.token}/getUpdates"
            params = {'offset': -1, 'limit': 1, 'timeout': 1}
            response = requests.get(api_url, params=params, timeout=5)
            if response.status_code == 200:
                logger.info("Successfully cleared pending updates")
            else:
                logger.warning(f"Failed to clear updates: {response.text}")
        except RequestException as e:
            logger.warning(f"Error clearing updates: {e}")

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        logger.info(f"Received signal {signum}")
        self.stop()
        sys.exit(0)

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            logger.info("Setting up command handlers...")

            @self.bot.message_handler(commands=['start'])
            def start_command(message):
                try:
                    logger.info(f"Received /start command from user {message.from_user.id}")
                    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.row(
                        telebot.types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"),
                        telebot.types.KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
                    )
                    markup.row(
                        telebot.types.KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"),
                        telebot.types.KeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤")
                    )
                    markup.row(
                        telebot.types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                        telebot.types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
                    )
                    self.bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
                    logger.info("Main menu displayed successfully")
                except Exception as e:
                    logger.error(f"Error in start command: {e}", exc_info=True)
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            @self.bot.message_handler(commands=['help'])
            def help_command(message):
                try:
                    from constants import HELP_TEXT
                    logger.info(f"Received /help command from user {message.from_user.id}")
                    self.bot.reply_to(message, HELP_TEXT)
                    logger.info("Help message sent successfully")
                except Exception as e:
                    logger.error(f"Error in help command: {e}", exc_info=True)
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            @self.bot.message_handler(commands=['addchat'])
            def add_chat_command(message):
                try:
                    logger.info(f"Received /addchat command in chat {message.chat.id}")
                    chat_id = message.chat.id
                    chat_title = message.chat.title or f"–õ–∏—á–Ω—ã–π —á–∞—Ç —Å {message.from_user.first_name}"
                    is_group = message.chat.type in ['group', 'supergroup']

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞
                    existing_chat = db.execute_query("SELECT chat_id FROM chats WHERE chat_id = ?", (chat_id,))
                    if existing_chat:
                        self.bot.reply_to(message, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É.")
                        return

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
                    db.execute_query(
                        "INSERT INTO chats (chat_id, title, is_group) VALUES (?, ?, ?)",
                        (chat_id, chat_title, is_group)
                    )
                    self.bot.reply_to(message, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É!")
                    logger.info(f"Chat {chat_id} successfully added")

                except Exception as e:
                    logger.error(f"Error in add chat command: {e}", exc_info=True)
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            @self.bot.message_handler(func=lambda message: True)
            def handle_text(message):
                try:
                    logger.info(f"Received message from user {message.from_user.id}: {message.text}")
                    if message.text == "‚ùì –ü–æ–º–æ—â—å":
                        help_command(message)
                    elif message.text == "üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
                        self.bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    elif message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π":
                        self.bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    else:
                        self.bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                except Exception as e:
                    logger.error(f"Error handling message: {e}", exc_info=True)
                    self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            logger.info("All handlers registered successfully")

        except Exception as e:
            logger.error(f"Error setting up handlers: {e}", exc_info=True)
            raise

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            with self._lock:
                logger.info("Starting Telegram bot...")
                self.bot.infinity_polling(
                    skip_pending=True,
                    timeout=10,
                    long_polling_timeout=5,
                    allowed_updates=["message"],
                    restart_on_change=True
                )
        except Exception as e:
            logger.error(f"Error starting bot: {e}", exc_info=True)
            self.stop()
            raise

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.bot:
                logger.info("Stopping bot...")
                self.bot.stop_polling()
                time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                logger.info("Bot stopped successfully")
        except Exception as e:
            logger.error(f"Error stopping bot: {e}", exc_info=True)

if __name__ == "__main__":
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.ensure_database()
        logger.info("Database initialized successfully")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = TelegramBot()
        bot.start()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
        if 'bot' in locals():
            bot.stop()
    except Exception as e:
        logger.error(f"Critical error during application startup: {e}", exc_info=True)
        raise